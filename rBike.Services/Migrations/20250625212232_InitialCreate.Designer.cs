// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rBike.Services.Database;

#nullable disable

namespace rBike.Services.Migrations
{
    [DbContext(typeof(RBikeContext))]
    [Migration("20250625212232_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("rBike.Services.Database.Bike", b =>
                {
                    b.Property<int>("BikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BikeId"));

                    b.Property<string>("BikeCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("StateMachine")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("BikeId")
                        .HasName("PK__Bike__7DC81721930C5EB0");

                    b.HasIndex("CategoryId");

                    b.ToTable("Bike", (string)null);
                });

            modelBuilder.Entity("rBike.Services.Database.BikeFavorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<int>("BikeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteId")
                        .HasName("PK__BikeFavo__CE74FAD54BB00939");

                    b.HasIndex("BikeId");

                    b.HasIndex("UserId");

                    b.ToTable("BikeFavorite", (string)null);
                });

            modelBuilder.Entity("rBike.Services.Database.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__19093A0B2D583F13");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("rBike.Services.Database.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("BikeId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId")
                        .HasName("PK__Comment__C3B4DFCAE6F1D8D3");

                    b.HasIndex("BikeId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("rBike.Services.Database.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId")
                        .HasName("PK__Equipmen__344744799D61F7FE");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("rBike.Services.Database.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__C3905BCFA2F04B9A");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("rBike.Services.Database.OrderItem", b =>
                {
                    b.Property<int>("OrderItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemsId"));

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemsId")
                        .HasName("PK__OrderIte__D5BB25556D52761E");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("rBike.Services.Database.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.HasKey("ReportId")
                        .HasName("PK__Report__D5BD4805B142A9CA");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("rBike.Services.Database.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("BikeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId")
                        .HasName("PK__Reservat__B7EE5F24F95E388E");

                    b.HasIndex("BikeId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("rBike.Services.Database.Review", b =>
                {
                    b.Property<int>("BikeReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BikeReviewId"));

                    b.Property<int>("BikeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BikeReviewId")
                        .HasName("PK__Review__E8F78D84571F9BEE");

                    b.HasIndex("BikeId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("rBike.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE1AA37876D6");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("rBike.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("DateRegistered")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CC4C84954AB9");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("rBike.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId")
                        .HasName("PK__UserRole__3D978A3552B6952C");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("rBike.Services.Database.Bike", b =>
                {
                    b.HasOne("rBike.Services.Database.Category", "Category")
                        .WithMany("Bikes")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Bike__CategoryId__2E1BDC42");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("rBike.Services.Database.BikeFavorite", b =>
                {
                    b.HasOne("rBike.Services.Database.Bike", "Bike")
                        .WithMany("BikeFavorites")
                        .HasForeignKey("BikeId")
                        .IsRequired()
                        .HasConstraintName("FK__BikeFavor__BikeI__34C8D9D1");

                    b.HasOne("rBike.Services.Database.User", "User")
                        .WithMany("BikeFavorites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__BikeFavor__UserI__35BCFE0A");

                    b.Navigation("Bike");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rBike.Services.Database.Comment", b =>
                {
                    b.HasOne("rBike.Services.Database.Bike", "Bike")
                        .WithMany("Comments")
                        .HasForeignKey("BikeId")
                        .IsRequired()
                        .HasConstraintName("FK__Comment__BikeId__3F466844");

                    b.HasOne("rBike.Services.Database.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Comment__UserId__3E52440B");

                    b.Navigation("Bike");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rBike.Services.Database.Order", b =>
                {
                    b.HasOne("rBike.Services.Database.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__UserId__440B1D61");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rBike.Services.Database.OrderItem", b =>
                {
                    b.HasOne("rBike.Services.Database.Equipment", "Equipment")
                        .WithMany("OrderItems")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderItem__Equip__47DBAE45");

                    b.HasOne("rBike.Services.Database.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderItem__Order__46E78A0C");

                    b.Navigation("Equipment");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("rBike.Services.Database.Reservation", b =>
                {
                    b.HasOne("rBike.Services.Database.Bike", "Bike")
                        .WithMany("Reservations")
                        .HasForeignKey("BikeId")
                        .IsRequired()
                        .HasConstraintName("FK__Reservati__BikeI__31EC6D26");

                    b.HasOne("rBike.Services.Database.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Reservati__UserI__30F848ED");

                    b.Navigation("Bike");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rBike.Services.Database.Review", b =>
                {
                    b.HasOne("rBike.Services.Database.Bike", "Bike")
                        .WithMany("Reviews")
                        .HasForeignKey("BikeId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__BikeId__3A81B327");

                    b.HasOne("rBike.Services.Database.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__UserId__3B75D760");

                    b.Navigation("Bike");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rBike.Services.Database.UserRole", b =>
                {
                    b.HasOne("rBike.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRole__RoleId__2B3F6F97");

                    b.HasOne("rBike.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRole__UserId__2A4B4B5E");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rBike.Services.Database.Bike", b =>
                {
                    b.Navigation("BikeFavorites");

                    b.Navigation("Comments");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("rBike.Services.Database.Category", b =>
                {
                    b.Navigation("Bikes");
                });

            modelBuilder.Entity("rBike.Services.Database.Equipment", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("rBike.Services.Database.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("rBike.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("rBike.Services.Database.User", b =>
                {
                    b.Navigation("BikeFavorites");

                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
